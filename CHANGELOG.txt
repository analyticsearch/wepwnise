              __________                
__  _  __ ____\______   \__  _  ______  
\ \/ \/ // __ \|     ___/\ \/ \/ /    \ 
 \     /\  ___/|    |     \     /   |  \
  \/\_/  \___  >____|      \/\_/|___|  /
             \/                      \/ 
========================================

NOTES
=====
Basically, Metasploit has the limitation of not being able to have one handler that
will automatically stage the correct second stage dependent on the architecture calling in.

This made it so I had to use separate LHOST and LPORTs. However, this is good, we can use this
to direct payloads where we seem fit.

CobaltStrike Beacon Payloads: Currently, please make sure the process list you are using are 32 bit
as Beacon payloads are all 32 bit stagers only at the moment. Only HTTP and HTTPS stagers are supported, DNS it not yet supported.

LIMITATIONS
===========
	* Currently x86 office can only inject into x86 processes even when running on an x64 system. This will be fixed later as it is not a priority for a PoC.
	* Beacon payloads can only work if injecting into x86 processes so use the --INJECT64 FALSE flag to give stability.
	* Only reverse_https and reverse_http stagers work for Beacon at the moment. reverse_dns_txt will be implemented later.
	* Raphael Mudge has not given me permission to use his reverse_dns_txt stager so I will write my own.

TESTING
=======
	* Main testing is on a x64 Windows 7 machine with x64 office.
		- Injects fine into x64 processes
		- Injects fine into x86 processes
		- No multiple spawn on fail injections
		- Works as designed

Testing has also been performed on the following:
	* Windows 8.1 Professional x64 with x86 office (Only injects into x86 processes, fix later date)	

TO-DO LIST
==========
	* Make Registry enumeration use native WINAPI calls. As WScript.Shell can be blocked via SRP.
	* If registry path has no "-EAF", we take it as protected. If it has "-EAF" we remove it from the list of bad
	  paths. Or we do not include it at all.
	* Add toggle for "stop on successful injection", currently always on so as to reduce noise.
	* If "stop on successful injection" is off, add --max-inject to limit max number of injections.
	* Add domains to be allowed in reverse_tcp LHOST. Currently it force validates IP addresses.
	* Map Accessible Shares on Network for Executables Feature
	* Add SRP Policy bypass
	* Make use of x86 payload obfuscation to obfuscate the payload being injected in memory to bypass all memory scanning threat detection mechanisms
	* reverse_dns_txt stager
	* Allow x86 office running on x64 system to inject into x64 processes.

	* Automatic Persistence through Templates in Trusted Locations. Auto plant in trusted location.
	* Remove dependency on WScript.Shell for when Wscript.exe is blocked
	* Automatic obfuscation
	* Remove dependency on Metasploit Framework

VERSION 0.31 BETA
=================
	* Fixed some Type issues on certain installations of office.

VERSION 0.30 BETA
=================
	* Fixed a lot of issues surrounding PtrSafe.
	* Fixed issues surrounding VBA7 compatibility to use PtrSafe
	* Fixed issues with data types

Generator
	* Fixed issues as per above.

Macro Template
	* Optimization of code usage.
	

VERSION 0.26 BETA
=================
	* Fixed the payload and generator for non EMET installed systems.
	* Dynamic memory allocation size

VERSION 0.25 BETA
=================
	* Now uses CreateProcessA with dwFlags = 1, in suspended state. Allows use of more binaries that are not protected now, even if we cannot find a way to keep it live.
Generator
	* Added code for the CPA calls
Macro Template
	* Added code for the CPA calls

VERSION 0.24 BETA
=================
	* Now supports HTTP, HTTPS payloads properly. Before there was an issue with generated functions being too big.
Generator
	* Use Array instead of generating WPM lines.

Macro Template
	* Use of Array instead of hundreds of lines of WPM.
		- Prevents VBA from dying and saying a function is too big.

VERSION 0.21 BETA
=================
Generator
	* Added ability to recurse directories and use all found binaries within that directory (Slow performance)
	* Uses a massive cached list from binary-paths.txt of most default Windows binaries
	* Will loop through Program Files
	* More accurate injection

Macro Template
	* Addition of directory recursive search for .exe's at specified paths in directory-paths.txt (Slow performance)
	* Now uses more accurate registry path to determine regular expressions for EMET protected paths. The
	  macro will regex a binary's path to the EMET protected path to determine whether EMET will protect it before
	  attempting injection
	* Fixed minor errors in quotation usage such as: "C:\Windows\syswow64\ping.exe" /t 127.0.0.1

VERSION 0.1 BETA
================
Generator
	* Initial Python Template for Generation
	* Allows for insertion of binary paths
	* Allows specification of MsgBox text
	* Allows you to turn off MsgBox
	* User can manually select x86 and x64 payloads to use
	* Ability to change where the payloads call back to individually
	* Currently does not support spaces in the binary paths due to not parsing double quotes

	* Validates IP address (may allow domains at a later stage to be used with reverse_tcp for example)
	* Remind myself to add variable to control virtual alloc space in case some large payloads are used

Macro Template
	* Enumeration of EMET protected processes
	* Automatic Windows architecture enumeration
	* Automatic Target binary architecture detection
	* Automatic selection of payload to inject
	* MsgBox to stop some automated analysis tools
	* Makes use of my technique to use native VB to inject into an unprotected process
	* Stops further injection when a successful injection has taken place	(May add a toggle later)
	* Current relies on %TEMP% directory due to inability to make use of .Exec without a popup
	* Automatically determines what VBA version to use
